{"version":3,"sources":["..\\node_modules\\victor\\index.js","lib\\renderer.js"],"names":["FourierCircleRenderer","context","height","width","size","Victor","lastPos","t","reversey","maxCircle","rotationSpeed","drawCoord","initSpot","working","data","rp","i","length","Math","sqrt","atan2","coordCanvas","document","createElement","getContext","clearRect","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","spotCanvas","spotCanvasContext","translate","drawImage","center","pointer","fillStyle","num","min","m","floor","r","ellipse","x","y","PI","theta","add","cos","sin","clone","fill","requestAnimationFrame","draw","bind"],"mappings":"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","file":"renderer.3d42adc0.map","sourceRoot":"..\\src","sourcesContent":["exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","import Victor from 'victor'\r\n\r\nexport class FourierCircleRenderer {\r\n  constructor (context, height, width) {\r\n    this.context = context;\r\n    this.height = height;\r\n    this.width = width;\r\n    this.size = new Victor(1, 1);\r\n    this.lastPos = new Victor(0, 0);\r\n    this.t = 0;\r\n    this.reversey = 1;\r\n    this.maxCircle = -1;\r\n    this.rotationSpeed = 0.0005;\r\n    this.drawCoord();\r\n    this.initSpot();\r\n    this.working = false\r\n  }\r\n\r\n  load(data) {\r\n    this.data = data\r\n    this.rp = [];\r\n    for (let i = 0; i < data.length; ++i) {\r\n      this.rp[i] = [\r\n        Math.sqrt(data[i][0] * data[i][0] + data[i][1] * data[i][1]),\r\n        Math.atan2(data[i][1], data[i][0])\r\n      ];\r\n    }\r\n  }\r\n\r\n  drawCoord () {\r\n    this.coordCanvas = document.createElement('canvas');\r\n    this.coordCanvas.height = this.height;\r\n    this.coordCanvas.width = this.width;\r\n    let context = this.coordCanvas.getContext('2d');\r\n    context.clearRect(0, 0, this.coordCanvas.height, this.coordCanvas.width);\r\n    context.strokeStyle = 'rgba(0, 15, 25, 100)';\r\n    context.lineWidth = 1;\r\n    context.beginPath();\r\n    context.moveTo(0, this.coordCanvas.height / 2);\r\n    context.lineTo(this.coordCanvas.width, this.coordCanvas.height / 2);\r\n    context.stroke();\r\n    context.beginPath();\r\n    context.moveTo(this.coordCanvas.width / 2, 0);\r\n    context.lineTo(this.coordCanvas.width / 2, this.coordCanvas.height);\r\n    context.stroke();\r\n  }\r\n\r\n  initSpot () {\r\n    this.spotCanvas = document.createElement('canvas');\r\n    this.spotCanvas.height = this.height;\r\n    this.spotCanvas.width = this.width;\r\n    this.spotCanvasContext = this.spotCanvas.getContext('2d');\r\n    this.spotCanvasContext.translate(this.spotCanvas.width / 2, this.spotCanvas.height / 2);\r\n  }\r\n\r\n  draw () {\r\n    this.context.clearRect(0, 0, this.width, this.height);\r\n    this.context.drawImage(this.coordCanvas, 0, 0);\r\n    this.t += this.rotationSpeed;\r\n    let center = new Victor(0, 0);\r\n    let pointer = new Victor(0, 0);\r\n    this.context.strokeStyle = 'rgb(255, 255, 255)';\r\n    this.context.fillStyle = 'rgba(0, 0, 0, 0)'\r\n    let num = this.maxCircle > 0 ? Math.min(this.maxCircle, this.data.length) : this.data.length;\r\n    for (let i = 0; i < num; ++i) {\r\n      let m = i > 0 ? Math.floor((i + 1) / 2) * ((i % 2 == 0) ? -1 : 1) : 0;//changed\r\n      let r = this.rp[i][0];\r\n      this.context.strokeStyle = 'rgb(175, 175, 175)';\r\n      this.context.beginPath();\r\n      this.context.ellipse(center.x * this.size.x + this.width / 2, this.reversey * center.y * this.size.y + this.height / 2, r * this.size.x, r * this.size.y, 0, 0, 2 * Math.PI);//Changed here\r\n      this.context.stroke();\r\n      let theta = this.reversey * this.t * m + this.rp[i][1];\r\n      pointer.add(new Victor(r * Math.cos(theta), r * Math.sin(theta)));\r\n      if (m == 0)\r\n        pointer = new Victor(this.data[0][0], this.data[0][1]);\r\n      this.context.strokeStyle = 'rgb(100, 100, 100)';\r\n      this.context.beginPath();\r\n      this.context.moveTo(center.x * this.size.x + this.width / 2, this.reversey * center.y * this.size.y + this.height / 2);\r\n      this.context.lineTo(pointer.x * this.size.x + this.width / 2, this.reversey * pointer.y * this.size.y + this.height / 2);\r\n      this.context.stroke();\r\n      center = pointer.clone();\r\n    }\r\n    //console.log(this.t, pointer.x, pointer.y);\r\n    this.context.strokeStyle = 'rgb(10, 255, 10)';\r\n    this.context.fillStyle = 'rgba(100, 124, 255, 150)';\r\n    this.context.beginPath();\r\n    this.context.ellipse(pointer.x * this.size.x + this.width / 2, this.reversey * pointer.y * this.size.y + this.height / 2, 4, 4, 0, 0, 2 * Math.PI);//Changed here\r\n    this.context.stroke();\r\n    if (this.t >= 0) {\r\n      this.spotCanvasContext.beginPath();\r\n      this.spotCanvasContext.strokeStyle = 'rgba(0, 0, 0, 0)';\r\n      this.spotCanvasContext.fillStyle = 'rgb(0, 155, 255)';\r\n      this.spotCanvasContext.ellipse(pointer.x * this.size.x, this.reversey * pointer.y * this.size.y, 2.5, 2.5, 0, 0, 2 * Math.PI);//Changed here\r\n      this.spotCanvasContext.fill();\r\n      this.context.drawImage(this.spotCanvas, 0, 0);\r\n    }\r\n    this.lastPos = pointer;\r\n    if (this.working) {\r\n      window.requestAnimationFrame(this.draw.bind(this))\r\n    }\r\n  }\r\n\r\n  play() {\r\n    if (!this.data) return\r\n    this.working = true\r\n    this.draw()\r\n  }\r\n\r\n  pause() {\r\n    this.working = false\r\n  }\r\n}\r\n"]}