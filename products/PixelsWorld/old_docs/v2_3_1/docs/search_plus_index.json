{"./":{"url":"./","title":"Be the Creator of your World","keywords":"","body":"Be the Creator of your world PixelsWorld documentation version: v2.3.1 Author ZzStarSound History v1.0 中文版 Welcome to the PixelsWorld! We have compressed all the essence of PixelsWorld in this one section. If you complete this section, you will be the Creator of your own world! To be simple PixelsWorld renders image basing on your code You can use presets that written by other people. By learning the simple GLSL code, create plugins by yourself. What it feels like to develop effects with PixelsWorld? PixelsWorld is just like Microsoft Excel. You write function, it will handle the data in the form for you. If we treat the data in form as input pixels, the calculated form as output pixels, Codes in PixelsWorld is the function in Microsoft Excel E.g. Make picture brighter To make a picture brighter, the simplest approach is just add the R,G,B by a number. If in Excel, we need to do something like this: Then we have made all pixels data \"brighter\" ! Here is what we need to write in PixelsWorld: bright_describe.shader outColor=getColor(uv)+vec4(0.2); It means: Get the input pixels (getColor) in current location (uv), and add the 4D vector RGBA by (0.2,0.2,0.2,0.2) (+vec4(0.2)). Finally, send (=) the result to the output pixel(outColor). But if we only write this single line, PixelsWorld cannot work fine. We need to add this line inside a \"shell\" to make it work. The complete version is this: bright.shader void main(){ outColor=getColor(uv)+vec4(0.2); } How to input codes Input picture (Right click to save) (Source artist) Result Add more controls! Mostly we don't just add 0.2 to the picture. We want it to be more controllable. So we can replace the 0.2 to slider[0]. In this way, we can change the value in Parameters panel to change the brightness of your picture. bright_control.shader void main(){ outColor=getColor(uv)+vec4(slider[0]); } But you can find that, if the value is negative, the picture will be transparent, we don't want this happened. Namely we need to avoid modifying the Alpha channel of the picture. bright_control.shader void main(){ vec4 inColor = getColor(uv); inColor.rgb = inColor.rgb + vec3(slider[0]); outColor = inColor; } It means: Save the input pixel into a temporary variable inColor, Add the value of slider[0] to the RGB of inColor, then send the inColor to the outColor. Add label to the parameter Save to preset Finally, we can save the code as a preset for next using. Go to the [contents/Editor/SavePresets.md] to learn more details. Congratulations! You have already mastered the most part of PixelsWorld! In addition to writing codes by yourself, you can go to the shadertoy, find some interesting code and run it in PixelsWorld. See this to learn how to use code from shadertoy. "},"contents/HowTo.html":{"url":"contents/HowTo.html","title":"Get/Try/Purchase","keywords":"","body":"Get/Try/Purchase Download Purchase/Download PixelsWorld Note: Some preset are under non-commercial license. Put the \"MiLai\" folder into (Your AE root folder)/Support Files/Plug-ins/ How to apply it Open Adobe After Effects. \"Ctrl + N\"(or \"Command + N\") to create a comp. Create a solid layer. Select the solid you created. Right click it => Effects => MiLai => PixelsWrold. Click \"Edit\" to change \"World formula\". There will be a World formula editor showed up . Find \"Preset list\" and select \"shadertoy\" Choose an effect that are interesting to you. Click \"Ok\". "},"contents/Editor/ScriptWindow.html":{"url":"contents/Editor/ScriptWindow.html","title":"World formula editor","keywords":"","body":"World formula editor How to open Click \"Edit\" button in plugin panel. To make it simple to describe, we assigned defferent area with color. ◆Code area Input your creative code here. Language can override the settings in your plugin panel. (default) selection means don't override. ◆Reference list You can copy reference code here, this is read-only currently. ◆Parameter settings Here you can see the labels, the default value of parameters and the language settings. Click Parameter manager button to manage them. See also Parameter manager Parameter settings will be saved with code into preset. ◆Preset list The pop-up menu will show you all the preset files in your local disc. Here we have same definition: A file with .pwp post fix, has JSON format and put beside plugin will be treat as one Preset column. The name of Preset column is the name of that file. One Preset column containing several Presets All Presets will be list on the bottom of the pop-up menu. ◆Formula preview The selected Preset's code will be shown here. If you want it to go to your code area, click Replace button to override code in the code area. If you only want to replace the text and don't want the parameter settings changed. Uncheck Apply when replace in Parameter settings preview area. If you want to add the preset code before your code, click button; If you want it behind your code, click Bottom>> button. ◆Parameter settings preview The selected Preset's parameter settings will be shown here. If you want it to go to your code area, click Replace button to override code in the code area. Apply when replace means if auto apply parameter settings when you clicked Replace button in Formula preview area. "},"contents/Editor/ParameterWindow.html":{"url":"contents/Editor/ParameterWindow.html","title":"Parameter manager","keywords":"","body":"Parameter manager Click Parameter manager button on World rule editor to start Parameter manager. This window will show up: Rule Type in lables in the first input area, default values in the following input area. (Decimal number) Clear names button will clear names in input area of label. Clear all names button will clear all names in input area of label. Reset names button will reset names in input area of label. Reset all names button will reset all names in input area of label. Reset values button will reset values in input area of default value. Reset all value button will reset all values in input area of default value. Encoding PixelsWorld supports utf-8. Some not supported character will be converted to ? If you work with international authors. We recommand using ASCII characters as the label. "},"contents/Editor/SavePresets.html":{"url":"contents/Editor/SavePresets.html","title":"Preset management","keywords":"","body":"Preset management Save preset In World formula editor,you can click Save as preset button to save your code as preset. Note: Override will happen if you use the name that already exists. Override save In World formula editor,you can click Save as preset button, and type the existing name to override the previous preset. Note This is not undoable. Rename presets Double click the preset to rename. Use name EXCEPTREMOVE and SORT. Sort presets Double click one preset and type in SORT. Remove presets Double click the preset you want to remove and type in REMOVE. Add preset column Click Add button in Preset list Note: Name must be unique. If failed, you might need to re-open Ae with administrator mode. Format Format: utf-8,JSON Not encrypted. Contribute presets Send your preset to rly_pxx_123@sina.com with your name. "},"contents/GLSL/GLSLCode.html":{"url":"contents/GLSL/GLSLCode.html","title":"GPU Berserker GLSL","keywords":"","body":"GPU Berserker GLSL In this section, we will have a quick look at how the GLSL works in PixelsWorld. What is GLSL? GLSL is an abbreviation of OpenGL Shader Language, which is supported by OpenGL, run on GPU. In short GLSL is what we used in section one, it can run on GPU. Advantage of GPU render If we treat CPU as a supercar, the GPU should be more like a bus. In the case we transport little people, like one or three, the supercar would be nice. (Handle single complicated calculation) But when there are thousands of people need to be transported, it seems that the bus should be the right option. (Render thousands of data symultaneously) The language we are learning, like C/C++, Java, Python, almost are running on CPU. Languages like GLSL, is designed for GPU. When we are about to render a picture. GPU can distribute one repetitive task to a number of \"workers\". If you want to learn more about GLSL, we recommand you to go to shadertoy.com, find some interesting arts and make out why this works. Details Before the GLSL is sent to OpenGL, PixelsWorld will combine pre-defined and post-defined codes to support features of Ae. If you are beginner, you can ignore this section for the moment. PixelsWorld V2.0 use #version 330 core. Here are pre-defined and post-defined codes. "},"contents/GLSL/RunGLSL.html":{"url":"contents/GLSL/RunGLSL.html","title":"Run GLSL","keywords":"","body":"Run GLSL Code Make sure you are in GLSL(GPU) mode; Then edit the World rule; You will see there is already some code in the showed up panel; default.shader void main(){ outColor = getColor(uv); } This code is just send the input pixels to the output. You can change the getColor(uv) to vec4(uv,0.0,1.0) for geting a beautiful uv color pattern; uvcolor.shader void main(){ outColor = vec4(uv,0.0,1.0); } Then, press the \"Ok\" button. If everything is right, you will get something in the scene like this: "},"contents/GLSL/Functions.html":{"url":"contents/GLSL/Functions.html","title":"Functions","keywords":"","body":"Functions This section will give a brief introduction of the functions created by us. The functions mentioned in this section could be immediately used without any declaration. "},"contents/GLSL/getColor.html":{"url":"contents/GLSL/getColor.html","title":"getColor","keywords":"","body":"getColor This function has two versions. getColor(vec2) and getColor(int ,vec2). getColor(vec2) Description : Get the color of inLayer in specified position. Parameters : vec2 : uv position. Return : vec4 : a RGBA color. NOTE : We highly recommend using getColor(uv); to obtain pixels, we cannot guarantee that texture2d can return the right pixel. getColor(int,vec2) Description : Get the color of specified layer in specified position. Parameters : int : layer id, -1 (or INPUT_LAYER_INDEX) means inLayer, number between 0 and 9 means the corresponding Layer Parameter in your plugin panel. (OUTPUT_LAYER_INDEX (which is -2) is provided in Lua render mode) vec2 : uv coordinates. Return : vec4 : a RGBA color. NOTE : So in other words, getColor(-1,uv); totally equals to getColor(uv); getColor(n,uv); can return the pixels of layer[n]. "},"contents/GLSL/uvxy.html":{"url":"contents/GLSL/uvxy.html","title":"uv2xy,xy2uv","keywords":"","body":"uv2xy,xy2uv This two functions can translate a vec2 between UV Coordinate and XY Coordinate. It just do some multiplication and division for you. uv2xy(vec2) Description : Calculate the xy position for a given uv position. Parameters : vec2 : uv position. Return : vec2 : xy position. NOTE : If your layer size is 1280 x 720. The uv2xy(vec2(0.1,0.5)); will return vec2(128.0,360.0); xy2uv(vec2) Description : Calculate the uv position for a given xy position. Parameters : vec2 : xy position. Return : vec2 : uv position. NOTE : If your layer size is 1920 x 1080. The xy2uv(vec2(192,108)); will return vec2(0.1,0.1); "},"contents/GLSL/LinkParameters.html":{"url":"contents/GLSL/LinkParameters.html","title":"Link parameters","keywords":"","body":"Link parameters The outside parameters are provided for you to do some animation. As you can see, there are 7 types of parameters are provided. Sliders Angles Points 3D Points Checkboxes Colors Layers Each of them have 10 controler for using. Example : link_slider.shader void main(){ outColor = vec4(uv,slider[0],1.0); } If you change the slider 0, the color in your scene would change. Details The parameters decleared in PixelsWorld are as below : parameters.shader uniform float slider[10]; uniform float angle[10]; uniform bool checkbox[10]; uniform vec2 point[10]; uniform vec3 point3d[10]; uniform vec4 color[10]; uniform sampler2D layer[10]; uniform sampler2D inLayer; NOTE : The \"inLayer\" means Input layer. The sampler2D is a value type provided by GLSL, you don't need to understand this value type. If you want to use the layer parameter. Please see the \"getColor\" section \"uniform\" means global value. This is to tell the GPU that \"You don't need to malloc memory and initialize them for each 'GPU worker', just do these when the \"GPU Boss of works\" start working. \" So on the other hand, \"uniform\" declearation almost shows up outside your function. "},"contents/GLSL/debug.html":{"url":"contents/GLSL/debug.html","title":"Debug","keywords":"","body":"Debug Check the debug checkbox in the plugin panel. If your program contains errors, it will be printed into your screen when this is checked. "},"contents/GLSL/Advanced_settings.html":{"url":"contents/GLSL/Advanced_settings.html","title":"Advanced settings","keywords":"","body":"Advanced settings There are several advanced settings in the effect panel. Language It controls which compiler to be used. Wrap U/V sampler This will affect the result of getColor() when sampler the pixels which is outside the boundary of image. Test code (Apply PixelsWorld to a footage.): wrap_uv_sampler.shader void main(){ outColor = getColor(uv*10); } Magnify/Minify sampler This will affect the behavior of getColor() when sampler want to do the interpolation of surrounding pixels. Test code (Apply PixelsWorld to a footage.): wrap_uv_sampler.shader void main(){ outColor = getColor(uv*0.1); } If you want to build the same pixel style effect. Swith this option to Nearest pixel "},"contents/GLSL/predefined.html":{"url":"contents/GLSL/predefined.html","title":"Pre-defined code","keywords":"","body":"Predifined code Before run shader code, PixelsWorld conbine your input with some predifined code to support some features. GLSL mode only has pre-define code. shadertoy mode has both pre-define and post-define code. GLSL mode Pre-define code pre_frag_shader_glsl.frag #define gl_Position uv2xy(uv) #define gl_FragCoord uv2xy(uv) #define gl_FragColor outColor #define INPUT_LAYER_INDEX -1 #define OUTPUT_LAYER_INDEX -2 out vec4 outColor; in vec2 uv; uniform float slider[10]; uniform float angle[10]; uniform bool checkbox[10]; uniform vec2 point[10]; uniform vec3 point3d[10]; uniform vec4 color[10]; uniform sampler2D layer[10]; uniform vec2 layerResolution[10]; uniform sampler2D inLayer; uniform sampler2D outLayer; uniform float time; uniform float inpoint; uniform float duration; uniform float comp_time; uniform vec4 date; uniform float fps; uniform float width; uniform float height; uniform vec2 origin; uniform vec2 resolution; uniform vec2 downsample; uniform mat4 camera_matrix; uniform vec4 camera_info; // x,y: resolution, z: distance to plane, w: distance to focus. uniform bool camera_perspective; uniform sampler1D inWaveL; uniform sampler1D inWaveR; uniform float inWaveN; uniform float inWaveS; uniform sampler1D inSpecL; uniform sampler1D inSpecR; uniform float inSpecN; vec4 getColor(int layerId,vec2 coord) { if(layerId==INPUT_LAYER_INDEX) return texture(inLayer,coord); if(layerId==OUTPUT_LAYER_INDEX) return texture(outLayer,coord); else if(layerId>=0 && layerId shadertoy mode Pre-define code pre_frag_shader_shadertoy.frag #define gl_Position (_PixelsWorld_uv * iResolution.xy) #define gl_FragCoord (_PixelsWorld_uv * iResolution.xy) #define gl_FragColor _PixelsWorld_outColor uniform vec3 iResolution; uniform float iTime; uniform float iTimeDelta; uniform int iFrame; // uniform float iChannelTime[4]; uniform vec4 iMouse; uniform vec4 iDate; uniform sampler2D iChannel0; uniform sampler2D iChannel1; uniform sampler2D iChannel2; uniform sampler2D iChannel3; uniform vec3 iChannelResolution[4]; #define INPUT_LAYER_INDEX -1 #define OUTPUT_LAYER_INDEX -2 uniform float _PixelsWorld_slider[10]; uniform float _PixelsWorld_angle[10]; uniform bool _PixelsWorld_checkbox[10]; uniform vec2 _PixelsWorld_point[10]; uniform vec3 _PixelsWorld_point3d[10]; uniform vec4 _PixelsWorld_color[10]; uniform sampler2D _PixelsWorld_layer[10]; uniform vec2 _PixelsWorld_layerResolution[10]; uniform sampler2D _PixelsWorld_inLayer; uniform sampler2D _PixelsWorld_outLayer; uniform float _PixelsWorld_time; uniform float _PixelsWorld_inpoint; uniform float _PixelsWorld_duration; uniform float _PixelsWorld_comp_time; uniform vec4 _PixelsWorld_date; uniform float _PixelsWorld_fps; uniform float _PixelsWorld_width; uniform float _PixelsWorld_height; uniform vec2 _PixelsWorld_origin; uniform vec2 _PixelsWorld_resolution; uniform vec2 _PixelsWorld_downsample; uniform mat4 _PixelsWorld_camera_matrix; uniform vec4 _PixelsWorld_camera_info; uniform bool _PixelsWorld_camera_perspective; uniform sampler1D _PixelsWorld_inWaveL; uniform sampler1D _PixelsWorld_inWaveR; uniform float _PixelsWorld_inWaveN; uniform float _PixelsWorld_inWaveS; uniform sampler1D _PixelsWorld_inSpecL; uniform sampler1D _PixelsWorld_inSpecR; uniform float _PixelsWorld_inSpecN; in vec2 _PixelsWorld_uv; out vec4 _PixelsWorld_outColor; Post-define code post_frag_shader_shadertoy.frag void main(){ mainImage(_PixelsWorld_outColor, _PixelsWorld_uv * iResolution.xy); } "},"contents/GLSL/shadertoy.html":{"url":"contents/GLSL/shadertoy.html","title":"Template Zone shadertoy","keywords":"","body":"Template Zone shadertoy Usage On shadertoy mode, you can run codes from shadertoy.com. Note It doesn't mean all code from shadertoy can be support perfectly in PixelsWorld. Some like codes containing VR are not support. Details Beginning v2.0.0, we use a new algorithm to support code from shadertoy, if you want to use variable that exists in GLSL mode, you need to add the _PixelsWorld_ prefix. E.g. slider[0] on GLSL mode = _PixelsWorld_slider[0] on shadertoy mode. And we don't recommand define your own _PixelsWorld_ prefixed variables. "},"contents/Lua/LuaCode.html":{"url":"contents/Lua/LuaCode.html","title":"World Center Lua","keywords":"","body":"Lua Code Lua is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications. ——Wiki) Version : Lua5.3 So Lua plays the roll that manages communication between Ae and Users. We only provide this environment and few convenience functions for you to use. In Lua, you can : Get pixels data Write pixels data Run JavaScript Run GLSL Get paramters data Run outer C library (COOL!) Load outer lua module Because of the advanced features, the users who using Lua render mode should have basic programming abilities and have a primary understanding about Lua language. If you have no idea about Lua, don't warry about it, it is pretty similiar with the expressions in Ae and the JavaScript. "},"contents/Lua/RunLua.html":{"url":"contents/Lua/RunLua.html","title":"Run Lua","keywords":"","body":"Run Lua code Switch your luange to Lua ( CPU & GPU ) And input the code below : hello.lua a = 5+6 b = \"PixelsWorld\" c = \"is cool!\" d = time e = pw.ch(\"slider\",0) f = \"5 + 6 = \" .. a .. \"\\nMessage : \" .. b .. \" \" .. c .. \"\\nCurrent time is : \" .. d .. \" (s)\\nValue of slider0 is : \" .. e pw.print(f) a..b means combine variable a and b as string. pw.print() reports message to debug window. pw.ch() fetches the value of a specified parameters. You are allowed to add ; in the end of each line, but it is not indispensable. Lua regards the \\n(line break) as the end mark of one section of code. "},"contents/Lua/RunGLSL.html":{"url":"contents/Lua/RunGLSL.html","title":"Run GLSL inside Lua","keywords":"","body":"Run GLSL in Lua Usage pw.glsl(GLSLcode[, useBuffer]) GLSLcode: string, the source fragment code. If your input code can be run in GLSL Render Mode, it can be directly used in here. (Codes from shadertoy.com is not supported here.) useBuffer : bool, optional, by default, this is set to false. If this is true, PixelsWorld will generate a temp memory to store your render result. When the GLSL render done, these data in temp memory will override the output layer's pixels data. Case you should set useBuffer to true: You want to re-read pixels from out layer. (Namely, there is getColor(OUTPUT_LAYER_INDEX,uv) in your glsl code) You want to make render slow. If you render glsl only one time each frame, you can totally ignore this option. Here are some code to describe the useBuffer : Tips: Use [==[ and ]==] to enclose the multi-line code. useBuffer_on.lua pw.glsl( [==[ void main(){ outColor = vec4(uv,0,1); } ]==] ); pw.glsl( [==[ void main(){ vec3 outlayerColor = getColor(OUTPUT_LAYER_INDEX,uv).rgb; outColor = vec4(vec3(1)-outlayerColor,1); } ]==],true ); useBuffer_off.lua pw.glsl( [==[ void main(){ outColor = vec4(uv,0,1); } ]==] ); pw.glsl( [==[ void main(){ vec3 outlayerColor = getColor(OUTPUT_LAYER_INDEX,uv).rgb; outColor = vec4(vec3(1)-outlayerColor,1); } ]==],false ); Speed it up The efficiency of the approach mentioned above is pretty LOW. That is because once we run the code, PixelsWorld returns the result to Ae. Then the next shader function need to read it back to perform the second shading. That's inefficiency Unless you want to read pixels to do some CPU calculation between this two shader, the most case is we want the PixelsWorld returns the result in the end, not in every shading. Then you need to write it this way: pw.beginShaders() pw.glsl(First glsl code) pw.glsl(Second glsl code) ... pw.glsl(Nth glsl code) pw.endShaders() We quote shaders by pw.beginShaders() and pw.endShaders(). Then the PixelsWorld only report result to Ae when pw.endShaders is called. This is very efficient! The algorithm of it is to create a \"Game Loop\" between beginShaders and endShaders. Tip: You can only write pw.beginShaders, PixelsWorld can add the pw.endShaders at the end automatically. pw.shadertoy and pw.full_glsl are also support. pw.beginShaders() pw.glsl(glsl code) pw.glsl(glsl code) pw.shadertoy(shadertoy code) pw.glsl(glsl code) pw.full_glsl(full_glsl code) pw.endShaders() Note: All shaders between beginShaders and endShaders can read the result of last shaders. Use getColor(-2,uv) or getColor(OUTPUT_LAYER_INDEX,uv) or texture(outLayer,uv) or (in shadertoy mode) texture(_PixelsWorld_outLayer,_PixelsWorld_uv) Flow chart "},"contents/Lua/cpin2out.html":{"url":"contents/Lua/cpin2out.html","title":"Copy input to output","keywords":"","body":"Copy input pixels to output Usage pw.in2out() Just send the input layer to output. Add this into your lua code if you don't want to modify the pixels data. Otherwise, all input pixels will be dropped. in2out.lua --Do something pw.in2out() --Do something "},"contents/Lua/LinkParameters.html":{"url":"contents/Lua/LinkParameters.html","title":"Link parameters","keywords":"","body":"Link parameters See pw.ch to get more details. "},"contents/Lua/globals.html":{"url":"contents/Lua/globals.html","title":"Globals","keywords":"","body":"Globals Run this code to get all global variables. globals.md pw.in2out() for k, v in pairs(_G) do pw.print(k) pw.print(\" \" .. type(v) , 1,.5,.5,.5) pw.print(\" \".. tostring(_G[k]),1,0,1,1) pw.println(\"\") end "},"contents/Lua/print.html":{"url":"contents/Lua/print.html","title":"pw.print()","keywords":"","body":"pw.print() Description Print string into screen (only ASCII is supported). Parameters pw.print(str) pw.print(str,alpha,red,green,blue) str: Input message alpha: Font alpha red: Font red green: Font green blue: Font blue Return None Example print.lua pw.print(\"Hello!\"); pw.print(\"Hello!\",1,0.5,0.5,1); See also pw.println() "},"contents/Lua/println.html":{"url":"contents/Lua/println.html","title":"pw.println()","keywords":"","body":"pw.println() Description Print string into screen (only ASCII is supported). Add \"\\n\" automatically at the end. Parameters pw.println(str) pw.println(str,alpha,red,green,blue) str: Input message alpha: Font alpha red: Font red green: Font green blue: Font blue Return None Example println.lua pw.println(\"Hello!\"); pw.println(\"Hello!\",1,0.5,0.5,1); See also pw.print() "},"contents/Lua/alert.html":{"url":"contents/Lua/alert.html","title":"pw.alert()","keywords":"","body":"pw.alert() Description Add a yellow alert message into your screen. Equals to pw.println(str,1,1,1,0) Parameters pw.alert(str) str: Alert string Return None Sample code alert.lua pw.alert(\"Hello!\"); See also pw.println() "},"contents/Lua/getColor.html":{"url":"contents/Lua/getColor.html","title":"pw.getColor()","keywords":"","body":"pw.getColor(x,y) Description : Return the pixel data in specific position Parameters : pw.getPixel(x,y) pw.getPixel(layerId,x,y) x,y should be integers. layerId should be an integer, -1 means the input layer, -2 means the output layer, 0~9 means the layer parameter. Return : Alpha, Red, Green, Blue. All are floats in range 0~1. (No clamp) Sample code : Here is a sample code that calculates the average value of A,R,G,B channels. getColor.lua pw.in2out() local sumA, sumR,sumG,sumB sumA = 0 sumR = 0 sumG = 0 sumB = 0 local A,R,G,B local total = width * height for y=0,height do for x=0,width do A,R,G,B = pw.getColor(x,y) sumA = sumA + A sumR = sumR + R sumG = sumG + G sumB = sumB + B end end pw.report(\"Average alpha value is : \" .. (sumA/total) ..\"\\nAverage red value is : \" .. (sumR/total)..\"\\nAverage green value is : \" .. (sumG/total)..\"\\nAverage blue value is : \" .. (sumB/total)) "},"contents/Lua/setColor.html":{"url":"contents/Lua/setColor.html","title":"pw.setColor()","keywords":"","body":"pw.setColor(x,y,A,R,G,B) Description : Set the pixel data in specific position Parameters : pw.setColor(x,y,A,R,G,B) x,y : integer A,R,G,B : floats in range 0-1 (No clamp in 32 bpc) Return : No return Sample code : Here is a sample code that renders a beautiful time-dependent uv color pattern. setColor.lua for y=0,height do for x=0,width do pw.setColor(x,y,1,x/width,y/height,math.sin(time*10)/2+.5) end end "},"contents/Lua/ch.html":{"url":"contents/Lua/ch.html","title":"pw.ch()","keywords":"","body":"pw.ch(name,id) Description : Get value of parameters. Parameters : pw.ch(\"slider\", id). pw.ch(\"angle\", id). pw.ch(\"checkbox\", id). pw.ch(\"point\", id [, dim]). pw.ch(\"3dpoint\", id, [, dim]). pw.ch(\"color\", id, [, dim]). pw.ch(\"layer\",id, x, y). id : integer in range 0~9. dim : integer start from 0. Its range is based on the params' type. x,y : integers. Return : \"slider\" : returns 1 float. \"angle\" : returns 1 float. \"checkbox\" : returns 1 float , 0.0 or 1.0. \"point\" : returns 2 floats, if dim is specified, returns 1 floats. \"3dpoint\" : returns 3 floats, if dim is specified, returns 1 floats. \"color\" : returns 3 floats, which represents R, G, B, if dim is specified, returns 1 floats. \"layer\" : returns 4 floats, which represents A, R, G, B. Sample code : ch.lua pw.report(\"The blue color of color 7 is \" .. pw.ch(\"color\", 7, 2)) "},"contents/Lua/in2out.html":{"url":"contents/Lua/in2out.html","title":"pw.in2out()","keywords":"","body":"pw.in2out() Description : Copy input pixels to output. Parameters : No parameter. Return : No return. Sample code : in2out.lua pw.in2out() "},"contents/Lua/glsl.html":{"url":"contents/Lua/glsl.html","title":"pw.glsl()","keywords":"","body":"pw.glsl(glslCode) Description : Render glsl code. Parameters : pw.glsl(glslCode). pw.glsl(glslCode,useBuffer). glslCode : string useBuffer : bool Return : No return. Error : Error message from GLSL render machine will be thrown. Sample code : glsl.lua pw.glsl([==[ void main(){ outColor = vec4(uv,mod(time,1),1); } ]==]) "},"contents/Lua/full_glsl.html":{"url":"contents/Lua/full_glsl.html","title":"pw.full_glsl()","keywords":"","body":"pw.full_glsl(full_glslCode) Description : Render glsl code. Parameters : pw.full_glsl(full_glslCode). pw.full_glsl(full_glslCode,useBuffer). full_glslCode : string (See sample code) useBuffer : bool Return : No return. Error : Error message from GLSL render machine will be thrown. Sample code : This code gives us exactly the same effect as sample code in pw.glsl. The main difference is that you should write the prefix code by yourself. full_glsl.lua pw.full_glsl([==[ #version 330 core #define gl_Position uv2xy(uv) #define gl_FragCoord uv2xy(uv) #define gl_FragColor outColor #define INPUT_LAYER_INDEX -1 #define OUTPUT_LAYER_INDEX -2 out vec4 outColor; in vec2 uv; uniform float slider[10]; uniform float angle[10]; uniform bool checkbox[10]; uniform vec2 point[10]; uniform vec3 point3d[10]; uniform vec4 color[10]; uniform sampler2D layer[10]; uniform vec2 layerResolution[10]; uniform sampler2D inLayer; uniform sampler2D outLayer; uniform float time; uniform float fps; uniform float width; uniform float height; uniform vec2 origin; uniform vec2 resolution; void main(){ outColor = vec4(uv,mod(time,1),1); } ]==]) "},"contents/Lua/luaShadertoyFunc.html":{"url":"contents/Lua/luaShadertoyFunc.html","title":"pw.shadertoy()","keywords":"","body":"pw.shadertoy(shadertoyCode) Description Render code from shadertoy Parameters pw.shadertoy(shadertoyCode). pw.shadertoy(shadertoyCode,useBuffer). shadertoyCode: String useBuffer: Bool Return No Example shadertoy.lua pw.shadertoy([==[ void mainImage( out vec4 fragColor, in vec2 fragCoord ){ fragColor=vec4(vec3(fragCoord.xy/iResolution.xy,sin(iTime)),1); } ]==]) "},"contents/Lua/beginShaders.html":{"url":"contents/Lua/beginShaders.html","title":"pw.beginShaders()","keywords":"","body":"pw.beginShaders() Description If there are two or more shader code need to be run. Add beginShaders and endShaders to speed it up. It promises there is not time wasted on swapping buffers. Parameters None Return None Example beginShaders.lua pw.beginShaders() pw.glsl(\"void main(){outColor = vec4(1);}\") pw.glsl(\"void main(){outColor = getColor(OUTPUT_LAYER_INDEX,uv)*sin(time)/2.+.5;}\") pw.endShaders() See also pw.endShaders() "},"contents/Lua/endShaders.html":{"url":"contents/Lua/endShaders.html","title":"pw.endShaders()","keywords":"","body":"pw.endShaders() Description If there are two or more shader code need to be run. Add beginShaders and endShaders to speed it up. It promises there is not time wasted on swapping buffers. Parameters None Return None Example endShaders.lua pw.beginShaders() pw.glsl(\"void main(){outColor = vec4(1);}\") pw.glsl(\"void main(){outColor = getColor(OUTPUT_LAYER_INDEX,uv)*sin(time)/2.+.5;}\") pw.endShaders() See also pw.beginShaders() "},"contents/Lua/js.html":{"url":"contents/Lua/js.html","title":"pw.js()","keywords":"","body":"pw.js(jsCode) Description : Run JavaScript code. Note: Since 2015, the render thread has been seperated by Ae, you cannot obtain any Object of Ae, but you can use this to create your own windows. Parameters : pw.js(jsCode). jsCode : string Return : Its first return is the resault of js code. Its second return is the error message. Sample code : js.lua pw.js(\"alert('Hello PixelsWorld!');\") "},"contents/Lua/cmd2.html":{"url":"contents/Lua/cmd2.html","title":"pw.cmd()","keywords":"","body":"pw.cmd(cmdCode) Description : Run CMD code. Parameters : pw.cmd(cmdCode). cmdCode : string Return : Its first result is true if the command terminated successfully, or nil otherwise. The second return value are as follows : \"exit\": the command terminated normally; the following number is the exit status of the command. \"signal\": the command was terminated by a signal; the following number is the signal that terminated the command. Sample code : cmd.lua pw.cmd(\"echo Hello PixelsWorld! & Pause \") NOTE : NEVER use commands like read on Mac OS. It will block the render thread and never render again. If you are blocked, delete the read command, save your project, close the Ae forcedly, then re-open. "},"contents/Lua/lua2.html":{"url":"contents/Lua/lua2.html","title":"pw.lua()","keywords":"","body":"pw.lua(luaCode) Description : Run lua code. Parameters : pw.lua(luaCode). luaCode: string Return : No return. Sample code : lua.lua pw.lua(\"pw.report(\\\"123+456 = \\\"..(123+456))\") "},"contents/Lua/getAudio.html":{"url":"contents/Lua/getAudio.html","title":"pw.getAudio()","keywords":"","body":"pw.getAudio() Description Get audio data Parameter pw.getAudio(start, duration) pw.getAudio(start, duration, layerid) pw.getAudio(start, duration, layerid, samplerate) start: Start time of sampling。 duration: Duration of sampling。 layerid: -1 means current layer, 0~9 means the index of layer parameter, default: -1 samplerate: Sample rate, default: 44100 Return Return four array one by one Waveform samples of left channel (float array, -1~1) Waveform samples of right channel (float array, -1~1) Spectrum samples of left channel (float array, 0~infinity) Spectrum samples of right channel (float array, 0~infinity) Example getAudio.lua pw.in2out() local wl,wr,fl,fr = pw.getAudio(time-0.1,0.2,-1,44100) local nm = math.floor(height/8); for i=1,nm do local wid =math.max(math.floor(i/nm*#wl),1) local fid = math.max(math.floor(i/nm*#fl/16),1) pw.print(string.format(\"%8.5f\",wl[wid]),1,wl[wid]*4,0,-wl[wid]*4) pw.print(\" \",1,0,0,0) pw.print(string.format(\"%8.5f\",wr[wid]),1,wr[wid]*4,0,-wr[wid]*4) pw.print(\" \",1,0.5,0.5,0.5) pw.print(string.format(\"%8.5f\",fl[fid]),1,fl[fid]/math.sqrt(#fl),0,0) pw.print(\" \",1,0,0,0) pw.print(string.format(\"%8.5f\",fr[fid]),1,0,0,fr[fid]/math.sqrt(#fr)) pw.println(\"\"); end "},"contents/Lua/JavaScript.html":{"url":"contents/Lua/JavaScript.html","title":"World Outskirts JavaScript","keywords":"","body":"JavaScript Code Javascript can be executed by function pw.js(\"Your code\") on Lua (CPU & GPU) language mode. executeJS.lua pw.js(\"alert('Hello PixelsWorld!')\"); "},"contents/Lua/CMDCode.html":{"url":"contents/Lua/CMDCode.html","title":"World Bed Rocks CMD","keywords":"","body":"CMD Code CMD commands can be executed by function pw.cmd(\"Your cmd commands\") on Lua (CPU & GPU) language mode. executeCMD.lua --Works on Windows platform pw.cmd(\"echo Hello PixelsWorld! & pause\"); "},"contents/Serial/SerialAttention.html":{"url":"contents/Serial/SerialAttention.html","title":"Apointments","keywords":"","body":"Appointments One serial number contains N Register number (N >= 1) One Register number registers one PC permanently. One Register number can be shared in any version of Ae in a PC. Registering costs one Register number, deactivating recovers one Register number Only Registering and Deactivating need internet. You can use PixelsWorld offline after registering completed. You don't have to deactivate before re-installing your OS, UNLESS you changed the hardwares like CPU or mainboard. When you finished re-installing your OS, register PixelsWorld again, this kind of registration doesn't cost the Register number. Contact with us if you fogot to deactivate your serial number and you do changed your CPU and mainboard. Serial number does't bind with any personal information. You can BUT NOT RECOMMAND sell it. MiLai visual performance group is not responsible for ANY trouble that happened in this kind of deals. The default value of Register numbner is 1. If you have more than one PC and you also want to run PixelsWorld on your multiple machines at the same time. Please purchase the corresponding number of PixelsWorld, we will send you the Serial number with Register number specified by you. "}}